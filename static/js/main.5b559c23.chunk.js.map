{"version":3,"sources":["Quote.js","App.js","index.js"],"names":["Quote","useState","quote","generateQuote","prev","showPrevButton","randomQuote","random","Math","floor","fetch","then","response","json","data","useEffect","prevQuoteRef","useRef","current","prevQuote","className","author","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMA0DeA,EAvDD,WACZ,MAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA+BF,oBAAS,GAAxC,mBAAOG,EAAP,KAAaC,EAAb,KAOMC,EAAc,WAClB,IAAMC,EAASC,KAAKC,MAAsB,IAAhBD,KAAKD,UAC/BG,MACE,yIAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLX,EAAcW,EAAKP,QAIzBQ,qBAAU,WACRT,MACC,IAEH,IAAMU,EAAeC,mBAErBF,qBAAU,WACRC,EAAaE,QAAUhB,KAGzB,IAAMiB,EAAYH,EAAaE,QAO/B,OACE,sBAAKE,UAAU,QAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BlB,EAAMA,QACnC,mBAAGkB,UAAU,gBAAb,SAA8BlB,EAAMmB,SACpC,sBAAKD,UAAU,iBAAf,UACGhB,EACC,wBAAQgB,UAAU,uBAAuBE,QAX3B,WACpBnB,EAAcgB,GACdd,GAAe,IAST,sBAGE,KACJ,wBAAQe,UAAU,sBAAsBE,QA3C5B,WAChBjB,GAAe,GACfC,KAyCI,8BCxCOiB,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCANC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.5b559c23.chunk.js","sourcesContent":["import \"./Quote.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\nconst Quote = () => {\n  const [quote, generateQuote] = useState(\"\");\n  const [prev, showPrevButton] = useState(false);\n\n  const nextQuote = () => {\n    showPrevButton(true);\n    randomQuote();\n  };\n\n  const randomQuote = () => {\n    const random = Math.floor(Math.random() * 101);\n    fetch(\n      \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        generateQuote(data[random]);\n      });\n  };\n\n  useEffect(() => {\n    randomQuote();\n  }, []);\n\n  const prevQuoteRef = useRef();\n\n  useEffect(() => {\n    prevQuoteRef.current = quote;\n  });\n\n  const prevQuote = prevQuoteRef.current;\n\n  const previousQuote = () => {\n    generateQuote(prevQuote);\n    showPrevButton(false);\n  };\n\n  return (\n    <div className=\"Quote\">\n      <h2 className=\"Quote__text\">{quote.quote}</h2>\n      <p className=\"Quote__author\">{quote.author}</p>\n      <div className=\"Quote__buttons\">\n        {prev ? (\n          <button className=\"Quote__buttons__prev\" onClick={previousQuote}>\n            Previous\n          </button>\n        ) : null}\n        <button className=\"Quote__buttons__new\" onClick={nextQuote}>\n          New quote\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Quote;\n","import Quote from \"./Quote\";\n\nfunction App() {\n  return (\n    <div>\n      <Quote />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}